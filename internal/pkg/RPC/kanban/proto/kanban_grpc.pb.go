// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: pb/kanban.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KanbanPackage_InitializeKanban_FullMethodName = "/kanban_package.KanbanPackage/InitializeKanban"
	KanbanPackage_AddLabel_FullMethodName         = "/kanban_package.KanbanPackage/AddLabel"
	KanbanPackage_GetLabels_FullMethodName        = "/kanban_package.KanbanPackage/GetLabels"
	KanbanPackage_GetLabel_FullMethodName         = "/kanban_package.KanbanPackage/GetLabel"
	KanbanPackage_AddItem_FullMethodName          = "/kanban_package.KanbanPackage/AddItem"
	KanbanPackage_GetItems_FullMethodName         = "/kanban_package.KanbanPackage/GetItems"
	KanbanPackage_GetItem_FullMethodName          = "/kanban_package.KanbanPackage/GetItem"
	KanbanPackage_UpdateItem_FullMethodName       = "/kanban_package.KanbanPackage/UpdateItem"
	KanbanPackage_AddComment_FullMethodName       = "/kanban_package.KanbanPackage/AddComment"
	KanbanPackage_UpdateComment_FullMethodName    = "/kanban_package.KanbanPackage/UpdateComment"
	KanbanPackage_DeleteComment_FullMethodName    = "/kanban_package.KanbanPackage/DeleteComment"
	KanbanPackage_AddReaction_FullMethodName      = "/kanban_package.KanbanPackage/AddReaction"
	KanbanPackage_DeleteReaction_FullMethodName   = "/kanban_package.KanbanPackage/DeleteReaction"
	KanbanPackage_ExportBoard_FullMethodName      = "/kanban_package.KanbanPackage/ExportBoard"
)

// KanbanPackageClient is the client API for KanbanPackage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KanbanPackageClient interface {
	InitializeKanban(ctx context.Context, in *CreateKanbanRequest, opts ...grpc.CallOption) (*BoardResponse, error)
	AddLabel(ctx context.Context, in *LabelRequest, opts ...grpc.CallOption) (*Label, error)
	GetLabels(ctx context.Context, in *BoardResponse, opts ...grpc.CallOption) (*GetLabelsResponse, error)
	GetLabel(ctx context.Context, in *GetLabelRequest, opts ...grpc.CallOption) (*Label, error)
	AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*Item, error)
	GetItems(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error)
	GetItem(ctx context.Context, in *DeleteReactionRequest, opts ...grpc.CallOption) (*Item, error)
	UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*Item, error)
	AddComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*Comment, error)
	UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*Comment, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*VoidResp, error)
	AddReaction(ctx context.Context, in *AddReactionRequest, opts ...grpc.CallOption) (*VoidResp, error)
	DeleteReaction(ctx context.Context, in *DeleteReactionRequest, opts ...grpc.CallOption) (*VoidResp, error)
	ExportBoard(ctx context.Context, in *BoardResponse, opts ...grpc.CallOption) (*ExportResponse, error)
}

type kanbanPackageClient struct {
	cc grpc.ClientConnInterface
}

func NewKanbanPackageClient(cc grpc.ClientConnInterface) KanbanPackageClient {
	return &kanbanPackageClient{cc}
}

func (c *kanbanPackageClient) InitializeKanban(ctx context.Context, in *CreateKanbanRequest, opts ...grpc.CallOption) (*BoardResponse, error) {
	out := new(BoardResponse)
	err := c.cc.Invoke(ctx, KanbanPackage_InitializeKanban_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanPackageClient) AddLabel(ctx context.Context, in *LabelRequest, opts ...grpc.CallOption) (*Label, error) {
	out := new(Label)
	err := c.cc.Invoke(ctx, KanbanPackage_AddLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanPackageClient) GetLabels(ctx context.Context, in *BoardResponse, opts ...grpc.CallOption) (*GetLabelsResponse, error) {
	out := new(GetLabelsResponse)
	err := c.cc.Invoke(ctx, KanbanPackage_GetLabels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanPackageClient) GetLabel(ctx context.Context, in *GetLabelRequest, opts ...grpc.CallOption) (*Label, error) {
	out := new(Label)
	err := c.cc.Invoke(ctx, KanbanPackage_GetLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanPackageClient) AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, KanbanPackage_AddItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanPackageClient) GetItems(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*GetItemResponse, error) {
	out := new(GetItemResponse)
	err := c.cc.Invoke(ctx, KanbanPackage_GetItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanPackageClient) GetItem(ctx context.Context, in *DeleteReactionRequest, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, KanbanPackage_GetItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanPackageClient) UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, KanbanPackage_UpdateItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanPackageClient) AddComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, KanbanPackage_AddComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanPackageClient) UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, KanbanPackage_UpdateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanPackageClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*VoidResp, error) {
	out := new(VoidResp)
	err := c.cc.Invoke(ctx, KanbanPackage_DeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanPackageClient) AddReaction(ctx context.Context, in *AddReactionRequest, opts ...grpc.CallOption) (*VoidResp, error) {
	out := new(VoidResp)
	err := c.cc.Invoke(ctx, KanbanPackage_AddReaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanPackageClient) DeleteReaction(ctx context.Context, in *DeleteReactionRequest, opts ...grpc.CallOption) (*VoidResp, error) {
	out := new(VoidResp)
	err := c.cc.Invoke(ctx, KanbanPackage_DeleteReaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanPackageClient) ExportBoard(ctx context.Context, in *BoardResponse, opts ...grpc.CallOption) (*ExportResponse, error) {
	out := new(ExportResponse)
	err := c.cc.Invoke(ctx, KanbanPackage_ExportBoard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KanbanPackageServer is the server API for KanbanPackage service.
// All implementations must embed UnimplementedKanbanPackageServer
// for forward compatibility
type KanbanPackageServer interface {
	InitializeKanban(context.Context, *CreateKanbanRequest) (*BoardResponse, error)
	AddLabel(context.Context, *LabelRequest) (*Label, error)
	GetLabels(context.Context, *BoardResponse) (*GetLabelsResponse, error)
	GetLabel(context.Context, *GetLabelRequest) (*Label, error)
	AddItem(context.Context, *AddItemRequest) (*Item, error)
	GetItems(context.Context, *GetItemRequest) (*GetItemResponse, error)
	GetItem(context.Context, *DeleteReactionRequest) (*Item, error)
	UpdateItem(context.Context, *UpdateItemRequest) (*Item, error)
	AddComment(context.Context, *CommentRequest) (*Comment, error)
	UpdateComment(context.Context, *UpdateCommentRequest) (*Comment, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*VoidResp, error)
	AddReaction(context.Context, *AddReactionRequest) (*VoidResp, error)
	DeleteReaction(context.Context, *DeleteReactionRequest) (*VoidResp, error)
	ExportBoard(context.Context, *BoardResponse) (*ExportResponse, error)
	mustEmbedUnimplementedKanbanPackageServer()
}

// UnimplementedKanbanPackageServer must be embedded to have forward compatible implementations.
type UnimplementedKanbanPackageServer struct {
}

func (UnimplementedKanbanPackageServer) InitializeKanban(context.Context, *CreateKanbanRequest) (*BoardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeKanban not implemented")
}
func (UnimplementedKanbanPackageServer) AddLabel(context.Context, *LabelRequest) (*Label, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLabel not implemented")
}
func (UnimplementedKanbanPackageServer) GetLabels(context.Context, *BoardResponse) (*GetLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabels not implemented")
}
func (UnimplementedKanbanPackageServer) GetLabel(context.Context, *GetLabelRequest) (*Label, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabel not implemented")
}
func (UnimplementedKanbanPackageServer) AddItem(context.Context, *AddItemRequest) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedKanbanPackageServer) GetItems(context.Context, *GetItemRequest) (*GetItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItems not implemented")
}
func (UnimplementedKanbanPackageServer) GetItem(context.Context, *DeleteReactionRequest) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedKanbanPackageServer) UpdateItem(context.Context, *UpdateItemRequest) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedKanbanPackageServer) AddComment(context.Context, *CommentRequest) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddComment not implemented")
}
func (UnimplementedKanbanPackageServer) UpdateComment(context.Context, *UpdateCommentRequest) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedKanbanPackageServer) DeleteComment(context.Context, *DeleteCommentRequest) (*VoidResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedKanbanPackageServer) AddReaction(context.Context, *AddReactionRequest) (*VoidResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReaction not implemented")
}
func (UnimplementedKanbanPackageServer) DeleteReaction(context.Context, *DeleteReactionRequest) (*VoidResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReaction not implemented")
}
func (UnimplementedKanbanPackageServer) ExportBoard(context.Context, *BoardResponse) (*ExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportBoard not implemented")
}
func (UnimplementedKanbanPackageServer) mustEmbedUnimplementedKanbanPackageServer() {}

// UnsafeKanbanPackageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KanbanPackageServer will
// result in compilation errors.
type UnsafeKanbanPackageServer interface {
	mustEmbedUnimplementedKanbanPackageServer()
}

func RegisterKanbanPackageServer(s grpc.ServiceRegistrar, srv KanbanPackageServer) {
	s.RegisterService(&KanbanPackage_ServiceDesc, srv)
}

func _KanbanPackage_InitializeKanban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKanbanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanPackageServer).InitializeKanban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KanbanPackage_InitializeKanban_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanPackageServer).InitializeKanban(ctx, req.(*CreateKanbanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanPackage_AddLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanPackageServer).AddLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KanbanPackage_AddLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanPackageServer).AddLabel(ctx, req.(*LabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanPackage_GetLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanPackageServer).GetLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KanbanPackage_GetLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanPackageServer).GetLabels(ctx, req.(*BoardResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanPackage_GetLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanPackageServer).GetLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KanbanPackage_GetLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanPackageServer).GetLabel(ctx, req.(*GetLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanPackage_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanPackageServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KanbanPackage_AddItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanPackageServer).AddItem(ctx, req.(*AddItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanPackage_GetItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanPackageServer).GetItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KanbanPackage_GetItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanPackageServer).GetItems(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanPackage_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanPackageServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KanbanPackage_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanPackageServer).GetItem(ctx, req.(*DeleteReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanPackage_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanPackageServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KanbanPackage_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanPackageServer).UpdateItem(ctx, req.(*UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanPackage_AddComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanPackageServer).AddComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KanbanPackage_AddComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanPackageServer).AddComment(ctx, req.(*CommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanPackage_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanPackageServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KanbanPackage_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanPackageServer).UpdateComment(ctx, req.(*UpdateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanPackage_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanPackageServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KanbanPackage_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanPackageServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanPackage_AddReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanPackageServer).AddReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KanbanPackage_AddReaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanPackageServer).AddReaction(ctx, req.(*AddReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanPackage_DeleteReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanPackageServer).DeleteReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KanbanPackage_DeleteReaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanPackageServer).DeleteReaction(ctx, req.(*DeleteReactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanPackage_ExportBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanPackageServer).ExportBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KanbanPackage_ExportBoard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanPackageServer).ExportBoard(ctx, req.(*BoardResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// KanbanPackage_ServiceDesc is the grpc.ServiceDesc for KanbanPackage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KanbanPackage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kanban_package.KanbanPackage",
	HandlerType: (*KanbanPackageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitializeKanban",
			Handler:    _KanbanPackage_InitializeKanban_Handler,
		},
		{
			MethodName: "AddLabel",
			Handler:    _KanbanPackage_AddLabel_Handler,
		},
		{
			MethodName: "GetLabels",
			Handler:    _KanbanPackage_GetLabels_Handler,
		},
		{
			MethodName: "GetLabel",
			Handler:    _KanbanPackage_GetLabel_Handler,
		},
		{
			MethodName: "AddItem",
			Handler:    _KanbanPackage_AddItem_Handler,
		},
		{
			MethodName: "GetItems",
			Handler:    _KanbanPackage_GetItems_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _KanbanPackage_GetItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _KanbanPackage_UpdateItem_Handler,
		},
		{
			MethodName: "AddComment",
			Handler:    _KanbanPackage_AddComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _KanbanPackage_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _KanbanPackage_DeleteComment_Handler,
		},
		{
			MethodName: "AddReaction",
			Handler:    _KanbanPackage_AddReaction_Handler,
		},
		{
			MethodName: "DeleteReaction",
			Handler:    _KanbanPackage_DeleteReaction_Handler,
		},
		{
			MethodName: "ExportBoard",
			Handler:    _KanbanPackage_ExportBoard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/kanban.proto",
}
