// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: kanban.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KanbanPackage_InitializeKanban_FullMethodName = "/kanban_package.KanbanPackage/InitializeKanban"
	KanbanPackage_GetKanban_FullMethodName        = "/kanban_package.KanbanPackage/GetKanban"
	KanbanPackage_AddItem_FullMethodName          = "/kanban_package.KanbanPackage/AddItem"
	KanbanPackage_UpdateStatus_FullMethodName     = "/kanban_package.KanbanPackage/UpdateStatus"
	KanbanPackage_UpdateItem_FullMethodName       = "/kanban_package.KanbanPackage/UpdateItem"
)

// KanbanPackageClient is the client API for KanbanPackage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KanbanPackageClient interface {
	InitializeKanban(ctx context.Context, in *CreateKanbanRequest, opts ...grpc.CallOption) (*UserAccount, error)
	GetKanban(ctx context.Context, in *GetKanbanRequest, opts ...grpc.CallOption) (*KanbanResponse, error)
	AddItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Item, error)
	UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*Item, error)
	UpdateItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Item, error)
}

type kanbanPackageClient struct {
	cc grpc.ClientConnInterface
}

func NewKanbanPackageClient(cc grpc.ClientConnInterface) KanbanPackageClient {
	return &kanbanPackageClient{cc}
}

func (c *kanbanPackageClient) InitializeKanban(ctx context.Context, in *CreateKanbanRequest, opts ...grpc.CallOption) (*UserAccount, error) {
	out := new(UserAccount)
	err := c.cc.Invoke(ctx, KanbanPackage_InitializeKanban_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanPackageClient) GetKanban(ctx context.Context, in *GetKanbanRequest, opts ...grpc.CallOption) (*KanbanResponse, error) {
	out := new(KanbanResponse)
	err := c.cc.Invoke(ctx, KanbanPackage_GetKanban_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanPackageClient) AddItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, KanbanPackage_AddItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanPackageClient) UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, KanbanPackage_UpdateStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kanbanPackageClient) UpdateItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, KanbanPackage_UpdateItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KanbanPackageServer is the server API for KanbanPackage service.
// All implementations must embed UnimplementedKanbanPackageServer
// for forward compatibility
type KanbanPackageServer interface {
	InitializeKanban(context.Context, *CreateKanbanRequest) (*UserAccount, error)
	GetKanban(context.Context, *GetKanbanRequest) (*KanbanResponse, error)
	AddItem(context.Context, *Item) (*Item, error)
	UpdateStatus(context.Context, *UpdateStatusRequest) (*Item, error)
	UpdateItem(context.Context, *Item) (*Item, error)
	mustEmbedUnimplementedKanbanPackageServer()
}

// UnimplementedKanbanPackageServer must be embedded to have forward compatible implementations.
type UnimplementedKanbanPackageServer struct {
}

func (UnimplementedKanbanPackageServer) InitializeKanban(context.Context, *CreateKanbanRequest) (*UserAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeKanban not implemented")
}
func (UnimplementedKanbanPackageServer) GetKanban(context.Context, *GetKanbanRequest) (*KanbanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKanban not implemented")
}
func (UnimplementedKanbanPackageServer) AddItem(context.Context, *Item) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedKanbanPackageServer) UpdateStatus(context.Context, *UpdateStatusRequest) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedKanbanPackageServer) UpdateItem(context.Context, *Item) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedKanbanPackageServer) mustEmbedUnimplementedKanbanPackageServer() {}

// UnsafeKanbanPackageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KanbanPackageServer will
// result in compilation errors.
type UnsafeKanbanPackageServer interface {
	mustEmbedUnimplementedKanbanPackageServer()
}

func RegisterKanbanPackageServer(s grpc.ServiceRegistrar, srv KanbanPackageServer) {
	s.RegisterService(&KanbanPackage_ServiceDesc, srv)
}

func _KanbanPackage_InitializeKanban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKanbanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanPackageServer).InitializeKanban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KanbanPackage_InitializeKanban_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanPackageServer).InitializeKanban(ctx, req.(*CreateKanbanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanPackage_GetKanban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKanbanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanPackageServer).GetKanban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KanbanPackage_GetKanban_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanPackageServer).GetKanban(ctx, req.(*GetKanbanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanPackage_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanPackageServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KanbanPackage_AddItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanPackageServer).AddItem(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanPackage_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanPackageServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KanbanPackage_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanPackageServer).UpdateStatus(ctx, req.(*UpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KanbanPackage_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KanbanPackageServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KanbanPackage_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KanbanPackageServer).UpdateItem(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

// KanbanPackage_ServiceDesc is the grpc.ServiceDesc for KanbanPackage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KanbanPackage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kanban_package.KanbanPackage",
	HandlerType: (*KanbanPackageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitializeKanban",
			Handler:    _KanbanPackage_InitializeKanban_Handler,
		},
		{
			MethodName: "GetKanban",
			Handler:    _KanbanPackage_GetKanban_Handler,
		},
		{
			MethodName: "AddItem",
			Handler:    _KanbanPackage_AddItem_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _KanbanPackage_UpdateStatus_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _KanbanPackage_UpdateItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kanban.proto",
}
